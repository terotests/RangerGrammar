{"version":3,"file":"detector.js","sourceRoot":"","sources":["../../../src/astparsers/detector.ts"],"names":[],"mappings":";AAEA;;EAEE;;AAIF,wBAAgC,IAAa;IAC3C,IAAI,gBAAgB,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAA;IACrC,uBAAuB,GAAG,EAAE,SAAgB;QAC1C,IAAM,WAAW,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QACrC,EAAE,CAAA,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,CAAA;QACrE,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,IAAW,EAAE,KAAY;YAC3D,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAChD,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC/B,EAAE,CAAA,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YAC/D,CAAC;YACD,MAAM,CAAC,SAAS,CAAA;QAClB,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,IAAI,SAAS,GAAG,CAAC,CAAA;IACjB,GAAG,CAAA,CAAW,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;QAAb,IAAI,CAAC,aAAA;QACR,aAAa,CAAC,CAAC,EAAE,SAAS,CAAC,CAAA;QAC3B,SAAS,EAAE,CAAA;KACZ;IACD,MAAM,CAAC,UAAC,IAAW,EAAE,KAAY;QAC/B,IAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAA;QAC1D,EAAE,CAAA,CAAC,SAAS,CAAC,CAAC,CAAC;YACb,GAAG,CAAA,CAAY,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;gBAAnB,IAAI,EAAE,kBAAA;gBACT,IAAM,EAAE,GAAG,EAAE,CAAC,IAAI,EAAC,KAAK,CAAC,CAAA;gBACzB,EAAE,CAAA,CAAC,EAAE,IAAI,CAAC,CAAC;oBAAC,MAAM,CAAC,EAAE,CAAA;aACtB;QACH,CAAC;QACD,MAAM,CAAC,CAAC,CAAC,CAAA;IACX,CAAC,CAAA;AACH,CAAC;AA5BD,wCA4BC;AAED,sDAAsD;AAEtD,yDAAyD;AACzD;;;;;;;;;;;EAWE","sourcesContent":["\n\n/*\nconst isCommentStart = createDetector(['<!--'])\n*/\n\nexport type detectorFn = (buff:string, index:number) => number\n\nexport function createDetector( strs:string[]) : detectorFn {\n  let cached_detectors = new Array(256)\n  function cacheDetector(str, str_index:number) {\n    const cache_index = str.charCodeAt(0)\n    if(!cached_detectors[cache_index]) cached_detectors[cache_index] = []\n    cached_detectors[cache_index].push((buff:string, index:number) : number => {\n      if((buff.length - index) < str.length) return -1\n      for(let i=0; i<str.length; i++) {\n        if(str.charCodeAt(i) != buff.charCodeAt(index + i)) return -1\n      }\n      return str_index\n    })\n  }  \n  let str_index = 0\n  for( let s of strs ) {\n    cacheDetector(s, str_index)\n    str_index++\n  }\n  return (buff:string, index:number) : number => {\n    const detectors = cached_detectors[buff.charCodeAt(index)]\n    if(detectors) {\n      for( let fn of detectors) {\n        const ci = fn(buff,index)\n        if(ci >= 0) return ci        \n      }\n    }\n    return -1\n  }\n}\n\n// Collecting some set of characters using function...\n\n// Creating functions that detect some character types...\n/*\n  isTagChar( c:number, first:boolean ) {\n    return (    ((c >= 65) && (c <= 90))     // A - Z\n    || ((c >= 97) && (c <= 122))    // a - z\n    || ( c == 95)                   // _\n    || ( c == 58)                   // :\n    || (!first && (c >= 48) && (c <= 57))     // 0 - 9\n    || (!first && c == 46)          // .\n    || (!first && c == 45)          // -\n   )\n  }\n*/"]}