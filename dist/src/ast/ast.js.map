{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../src/ast/ast.ts"],"names":[],"mappings":";;AAGA;IAAA;QAEE,aAAQ,GAAa,EAAE,CAAA;QAGvB,mBAAc,GAAG,KAAK,CAAA;QACtB,mBAAc,GAAG,KAAK,CAAA;QAGtB,oBAAe,GAAG,EAAE,CAAA;QAEpB,kBAAa,GAAG,CAAC,CAAA;QACjB,mBAAc,GAAG,CAAC,CAAA;QAElB,eAAU,GAAG,KAAK,CAAA;QAClB,UAAK,GAAG,KAAK,CAAA;IAgBf,CAAC;IAVC,+BAAa,GAAb;QACE,EAAE,CAAA,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAE,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,aAAa,EAAE,EAAlB,CAAkB,CAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;QAC7F,CAAC;QACD,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,EAAE,CAAA,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAA;YAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;QAC9C,CAAC;IACH,CAAC;IAEH,cAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,0BAAO","sourcesContent":["import { ParserBuffer } from \"../astparsers/buffer\";\n\n\nexport class ASTNode {\n\n  children:ASTNode[] = []\n  parent:ASTNode\n  \n  end_expression = false\n  infix_operator = false\n  infix_node:ASTNode\n\n  expression_name = ''\n  \n  operator_pred = 0\n  operator_assoc = 0\n\n  expression = false\n  block = false\n  \n  buff : string \n  sp : number\n  ep : number\n\n  getCodeString() : string {\n    if(this.expression) {\n      return this.expression_name + this.children.map( ch => ch.getCodeString() ).join(' ') + ')'\n    }\n    if(this.buff) {\n      if(this.sp > this.ep) return ''\n      return this.buff.substring(this.sp, this.ep)\n    }\n  }\n\n}\n"]}