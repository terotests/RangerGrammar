{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../src/ast/ast.ts"],"names":[],"mappings":";;AAGA;IAAA;QAEE,qCAAqC;QACrC,SAAI,GAAG,EAAE,CAAA;QACT,aAAQ,GAAG,EAAE,CAAA;QAEb,6BAA6B;QAC7B,cAAc;QACd,cAAc;QACd,YAAY;QACZ,WAAW;QACX,kBAAa,GAA4B,EAAE,CAAA;QAE3C,aAAQ,GAAa,EAAE,CAAA;QAGvB,mBAAc,GAAG,KAAK,CAAA;QACtB,mBAAc,GAAG,KAAK,CAAA;QAGtB,oBAAe,GAAG,EAAE,CAAA;QAEpB,kBAAa,GAAG,CAAC,CAAA;QACjB,mBAAc,GAAG,CAAC,CAAA;QAElB,eAAU,GAAG,KAAK,CAAA;QAClB,UAAK,GAAG,KAAK,CAAA;QACb,QAAG,GAAG,KAAK,CAAA;IA0Bb,CAAC;IApBC,+BAAa,GAAb;QACE,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,IAAI,CAAC,GAAG,EAAE,CAAA;QACV,EAAE,CAAA,CAAC,KAAK,CAAC,MAAM,GAAG,CAAE,CAAC,CAAC,CAAC;YACrB,GAAG,CAAA,CAAc,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;gBAAjB,IAAI,MAAI,cAAA;gBACX,CAAC,GAAG,CAAC,GAAG,MAAI,GAAG,MAAM,GAAC,IAAI,CAAC,aAAa,CAAC,MAAI,CAAC,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,aAAa,EAAE,EAAjB,CAAiB,CAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACvF;QACH,CAAC;QACD,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,GAAG,MAAI,CAAC,MAAG,CAAA;QACd,CAAC;QACD,EAAE,CAAA,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAE,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,aAAa,EAAE,EAAlB,CAAkB,CAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;QACjG,CAAC;QACD,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,EAAE,CAAA,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAA;YAC/B,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;QAClD,CAAC;IACH,CAAC;IAEH,cAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,0BAAO","sourcesContent":["import { ParserBuffer } from \"../astparsers/buffer\";\n\n\nexport class ASTNode {\n\n  // can there be some named nodes ??? \n  name = ''\n  typeName = ''\n\n  // if you collect things like\n  // - classBody\n  // - arguments\n  // - extends\n  // ... etc.\n  namedChildren:{[key:string]:ASTNode[]} = {}\n\n  children:ASTNode[] = []\n  parent:ASTNode\n  \n  end_expression = false\n  infix_operator = false\n  infix_node:ASTNode\n\n  expression_name = ''\n  \n  operator_pred = 0\n  operator_assoc = 0\n\n  expression = false\n  block = false\n  nop = false\n  \n  buff : string \n  sp : number\n  ep : number\n\n  getCodeString() : string {\n    const named = Object.keys(this.namedChildren);\n    let n = ''\n    if(named.length > 0 ) {\n      for( let name of named ) {\n        n = n + name + ' => '+this.namedChildren[name].map( n => n.getCodeString() ).join(',')\n      }\n    }\n    if(n) {\n      n = `[${n}]`\n    }\n    if(this.expression) {\n      return n + this.expression_name + this.children.map( ch => ch.getCodeString() ).join(' ') + ')' \n    }\n    if(this.buff) {\n      if(this.sp > this.ep) return ''\n      return n + this.buff.substring(this.sp, this.ep) \n    }\n  }\n\n}\n"]}